
D:/demo/x86os/build/source/kernel/kernel.elf:     file format elf32-i386
D:/demo/x86os/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000224 memsz 0x00002e40 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000224  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00002c00  00010240  00010240  00001224  2**5
                  ALLOC
  2 .debug_line   000002ca  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000054c  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002d2  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    000002a0  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
  8 .debug_frame  00000154  00000000  00000000  00002044  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00010240 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
0001002b l     F .text	00000028 lgdt
00010240 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010198 l     F .text	00000028 lidt
00010a40 l     O .bss	00000400 idt_table
00000000 l    df *ABS*	00000000 init.c
0001018d g     F .text	0000000b cpu_init
0001021f g     F .text	00000005 init_main
00010e40 g     O .bss	00002000 stack
0001020c g     F .text	00000013 kernel_init
00010000 g       .text	00000000 _start
00010120 g     F .text	0000006d init_gdt
000101c0 g     F .text	0000004c irq_init
00010053 g     F .text	00000086 segment_desc_set
000100d9 g     F .text	00000047 gate_desc_set



Disassembly of section .text:

00010000 <_start>:
	.text
	.extern kernel_init
	.global _start
	.extern init_main
_start:
	push %ebp
   10000:	55                   	push   %ebp
	mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
	mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
	# kernel_init (boot_info)
	push %eax
   10006:	50                   	push   %eax
	call kernel_init
   10007:	e8 00 02 00 00       	call   1020c <kernel_init>

	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 40 2e 01 00       	mov    $0x12e40,%esp
	jmp init_main
   10026:	e9 f4 01 00 00       	jmp    1021f <init_main>

0001002b <lgdt>:
static inline void sti (void) {
    __asm__ __volatile__("sti");
}

// 加载GDT表
static inline void lgdt (uint32_t start, uint32_t size) {
   1002b:	55                   	push   %ebp
   1002c:	89 e5                	mov    %esp,%ebp
   1002e:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } gdt;

    gdt.start31_16 = start >> 16;
   10031:	8b 45 08             	mov    0x8(%ebp),%eax
   10034:	c1 e8 10             	shr    $0x10,%eax
   10037:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1003b:	8b 45 08             	mov    0x8(%ebp),%eax
   1003e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10042:	8b 45 0c             	mov    0xc(%ebp),%eax
   10045:	83 e8 01             	sub    $0x1,%eax
   10048:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1004c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10050:	90                   	nop
   10051:	c9                   	leave  
   10052:	c3                   	ret    

00010053 <segment_desc_set>:
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10053:	55                   	push   %ebp
   10054:	89 e5                	mov    %esp,%ebp
   10056:	83 ec 14             	sub    $0x14,%esp
   10059:	8b 45 14             	mov    0x14(%ebp),%eax
   1005c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   10060:	8b 45 08             	mov    0x8(%ebp),%eax
   10063:	c1 f8 03             	sar    $0x3,%eax
   10066:	c1 e0 03             	shl    $0x3,%eax
   10069:	05 40 02 01 00       	add    $0x10240,%eax
   1006e:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
	if (limit > 0xfffff) {
   10071:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10078:	76 0f                	jbe    10089 <segment_desc_set+0x36>
		attr |= 0x8000;
   1007a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   10080:	8b 45 10             	mov    0x10(%ebp),%eax
   10083:	c1 e8 0c             	shr    $0xc,%eax
   10086:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   10089:	8b 45 10             	mov    0x10(%ebp),%eax
   1008c:	89 c2                	mov    %eax,%edx
   1008e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10091:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10094:	8b 45 0c             	mov    0xc(%ebp),%eax
   10097:	89 c2                	mov    %eax,%edx
   10099:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1009c:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   100a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   100a3:	c1 e8 10             	shr    $0x10,%eax
   100a6:	89 c2                	mov    %eax,%edx
   100a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100ab:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   100ae:	8b 45 10             	mov    0x10(%ebp),%eax
   100b1:	c1 e8 10             	shr    $0x10,%eax
   100b4:	c1 e0 08             	shl    $0x8,%eax
   100b7:	66 25 00 0f          	and    $0xf00,%ax
   100bb:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   100bf:	89 c2                	mov    %eax,%edx
   100c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100c4:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   100c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   100cb:	c1 e8 18             	shr    $0x18,%eax
   100ce:	89 c2                	mov    %eax,%edx
   100d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100d3:	88 50 07             	mov    %dl,0x7(%eax)
}
   100d6:	90                   	nop
   100d7:	c9                   	leave  
   100d8:	c3                   	ret    

000100d9 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   100d9:	55                   	push   %ebp
   100da:	89 e5                	mov    %esp,%ebp
   100dc:	83 ec 08             	sub    $0x8,%esp
   100df:	8b 55 0c             	mov    0xc(%ebp),%edx
   100e2:	8b 45 14             	mov    0x14(%ebp),%eax
   100e5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   100e9:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   100ed:	8b 45 10             	mov    0x10(%ebp),%eax
   100f0:	89 c2                	mov    %eax,%edx
   100f2:	8b 45 08             	mov    0x8(%ebp),%eax
   100f5:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   100f8:	8b 45 08             	mov    0x8(%ebp),%eax
   100fb:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   100ff:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   10103:	8b 45 08             	mov    0x8(%ebp),%eax
   10106:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1010a:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   1010e:	8b 45 10             	mov    0x10(%ebp),%eax
   10111:	c1 e8 10             	shr    $0x10,%eax
   10114:	89 c2                	mov    %eax,%edx
   10116:	8b 45 08             	mov    0x8(%ebp),%eax
   10119:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1011d:	90                   	nop
   1011e:	c9                   	leave  
   1011f:	c3                   	ret    

00010120 <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void) {
   10120:	55                   	push   %ebp
   10121:	89 e5                	mov    %esp,%ebp
   10123:	83 ec 10             	sub    $0x10,%esp
	// 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10126:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1012d:	eb 19                	jmp    10148 <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   1012f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10132:	c1 e0 03             	shl    $0x3,%eax
   10135:	6a 00                	push   $0x0
   10137:	6a 00                	push   $0x0
   10139:	6a 00                	push   $0x0
   1013b:	50                   	push   %eax
   1013c:	e8 12 ff ff ff       	call   10053 <segment_desc_set>
   10141:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10144:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10148:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1014f:	7e de                	jle    1012f <init_gdt+0xf>
    }

    //数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10151:	68 92 c0 00 00       	push   $0xc092
   10156:	6a ff                	push   $0xffffffff
   10158:	6a 00                	push   $0x0
   1015a:	6a 10                	push   $0x10
   1015c:	e8 f2 fe ff ff       	call   10053 <segment_desc_set>
   10161:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10164:	68 9a c0 00 00       	push   $0xc09a
   10169:	6a ff                	push   $0xffffffff
   1016b:	6a 00                	push   $0x0
   1016d:	6a 08                	push   $0x8
   1016f:	e8 df fe ff ff       	call   10053 <segment_desc_set>
   10174:	83 c4 10             	add    $0x10,%esp
    //         KERNEL_SELECTOR_CS,
    //         (uint32_t)exception_handler_syscall,
    //         GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10177:	b8 40 02 01 00       	mov    $0x10240,%eax
   1017c:	68 00 08 00 00       	push   $0x800
   10181:	50                   	push   %eax
   10182:	e8 a4 fe ff ff       	call   1002b <lgdt>
   10187:	83 c4 08             	add    $0x8,%esp
}
   1018a:	90                   	nop
   1018b:	c9                   	leave  
   1018c:	c3                   	ret    

0001018d <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init (void) {
   1018d:	55                   	push   %ebp
   1018e:	89 e5                	mov    %esp,%ebp
    // mutex_init(&mutex);

    init_gdt();
   10190:	e8 8b ff ff ff       	call   10120 <init_gdt>
   10195:	90                   	nop
   10196:	5d                   	pop    %ebp
   10197:	c3                   	ret    

00010198 <lidt>:

// 加载idt表
static inline void lidt (uint32_t start, uint32_t size) {
   10198:	55                   	push   %ebp
   10199:	89 e5                	mov    %esp,%ebp
   1019b:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } idt;

    idt.start31_16 = start >> 16;
   1019e:	8b 45 08             	mov    0x8(%ebp),%eax
   101a1:	c1 e8 10             	shr    $0x10,%eax
   101a4:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   101a8:	8b 45 08             	mov    0x8(%ebp),%eax
   101ab:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   101af:	8b 45 0c             	mov    0xc(%ebp),%eax
   101b2:	83 e8 01             	sub    $0x1,%eax
   101b5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
   101b9:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   101bd:	90                   	nop
   101be:	c9                   	leave  
   101bf:	c3                   	ret    

000101c0 <irq_init>:

#define IDE_TABLE_NR            128

static gate_desc_t idt_table[IDE_TABLE_NR];

void irq_init(void) {
   101c0:	55                   	push   %ebp
   101c1:	89 e5                	mov    %esp,%ebp
   101c3:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDE_TABLE_NR; i++) {
   101c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   101cd:	eb 1e                	jmp    101ed <irq_init+0x2d>
        gate_desc_set(idt_table + i, 0, 0, 0);
   101cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   101d2:	c1 e0 03             	shl    $0x3,%eax
   101d5:	05 40 0a 01 00       	add    $0x10a40,%eax
   101da:	6a 00                	push   $0x0
   101dc:	6a 00                	push   $0x0
   101de:	6a 00                	push   $0x0
   101e0:	50                   	push   %eax
   101e1:	e8 f3 fe ff ff       	call   100d9 <gate_desc_set>
   101e6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDE_TABLE_NR; i++) {
   101e9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   101ed:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   101f1:	7e dc                	jle    101cf <irq_init+0xf>
    }
     
     lidt((uint32_t)idt_table, sizeof(idt_table));
   101f3:	b8 40 0a 01 00       	mov    $0x10a40,%eax
   101f8:	83 ec 08             	sub    $0x8,%esp
   101fb:	68 00 04 00 00       	push   $0x400
   10200:	50                   	push   %eax
   10201:	e8 92 ff ff ff       	call   10198 <lidt>
   10206:	83 c4 10             	add    $0x10,%esp
   10209:	90                   	nop
   1020a:	c9                   	leave  
   1020b:	c3                   	ret    

0001020c <kernel_init>:
#include "init.h"
#include "comm/boot_info.h"
#include "cpu/cpu.h"
#include "cpu/irq.h"

void kernel_init (boot_info_t *boot_info) {
   1020c:	55                   	push   %ebp
   1020d:	89 e5                	mov    %esp,%ebp
   1020f:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10212:	e8 76 ff ff ff       	call   1018d <cpu_init>
    irq_init();
   10217:	e8 a4 ff ff ff       	call   101c0 <irq_init>
}
   1021c:	90                   	nop
   1021d:	c9                   	leave  
   1021e:	c3                   	ret    

0001021f <init_main>:

void init_main (void) {
   1021f:	55                   	push   %ebp
   10220:	89 e5                	mov    %esp,%ebp

    for (;;) {}
   10222:	eb fe                	jmp    10222 <init_main+0x3>
